name: Integration & Unit test

on:
  workflow_call:
    inputs:
      php:
        description: 'PHP version'
        required: true
        type: number
      moodle:
        description: 'Moodle version (branch, tag or commit)'
        required: true
        type: string
      os:
        description: 'Operating system'
        required: true
        type: string
      org:
        description: 'Organization'
        required: false
        type: string
        default: 'praxisdigital'
      dependencies:
        description: 'Plugin dependencies. Use newline if there are multiple dependencies. Basic format: "repo@ref" User format: "org/repo@ref" Custom path format: "org/repo:path@ref"'
        required: false
        type: string
        default: ''
      dbtype:
        description: 'Database type (mysqli, pgsql, sqlsrv)'
        required: false
        type: string
        default: 'mysqli'
      experimental:
        description: 'Is experimental run'
        required: false
        type: boolean
        default: false
    secrets:
      PRIVATE_REPO_TOKEN:
        description: 'Token for private repositories'
        required: false

jobs:
  PHPUnit:
    name: "PHPUnit: ${{ github.repository }}@${{ github.ref }}, moodle@${{ inputs.moodle }}, php@${{ inputs.php }}, os: ${{ inputs.os }}"
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    env:
      dbname: test
      dbuser: test
      dbpass: test
      dbcollation: utf8mb4_unicode_ci
      plugins: ""
      #pathtophp: /usr/bin/php
    strategy:
      matrix:
        include:
          - os: ${{ inputs.os }}
            php: ${{ inputs.php }}
            db: ${{ inputs.dbtype }}
            moodle: ${{ inputs.moodle }}
            experimental: ${{ inputs.experimental }}
    steps:
      - name: Setting up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: none
          ini-values: 'max_input_vars=5000'

      - name: Checking out code from moodle/moodle
        uses: actions/checkout@v4
        with:
          repository: moodle/moodle
          ref: ${{ inputs.moodle }}


      - name: Prepare plugins
        run: |
          # Adding the plugin repo into a list of dependencies
          plugins="${{ github.repository }}@${{ github.ref }}"

          # Adding dependencies into the plugin list that contains path and ref
          dependencies="${{ inputs.dependencies }}"
          if [[ $dependencies != '' ]]; then
            for dep in $dependencies; do
              plugin=$(echo $dep | tr -d ' ')
              plugins="${plugins}\n${plugin}"
            done
          fi

          echo -e $plugins > $GITHUB_WORKSPACE/plugins.txt

      - name: Generate Moodle configuration
        env:
          dbtype: ${{ matrix.db }}
          dbname: ${{ env.dbname || 'test' }}
          dbuser: ${{ env.dbuser || 'test' }}
          dbpass: ${{ env.dbpass || 'test' }}
        run: |
          echo '<?php' >> $GITHUB_WORKSPACE/config.php
          echo 'class moodle_env {' >> $GITHUB_WORKSPACE/config.php
          echo '    public static function get_env(string $key, string $default = ""): string {' >> $GITHUB_WORKSPACE/config.php
          echo '        $value = getenv($key);' >> $GITHUB_WORKSPACE/config.php
          echo '        return empty($value) ? $default : $value;' >> $GITHUB_WORKSPACE/config.php
          echo '    }' >> $GITHUB_WORKSPACE/config.php
          echo '}' >> $GITHUB_WORKSPACE/config.php
          echo 'unset($CFG);' >> $GITHUB_WORKSPACE/config.php
          echo 'global $CFG;' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG = new stdClass();' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->dbtype    = moodle_env::get_env("dbtype", "mysqli");' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->dblibrary = "native";' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->dbhost    = "127.0.0.1";' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->dbname    = moodle_env::get_env("dbname", "test");' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->dbuser    = moodle_env::get_env("dbuser", "test");' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->dbpass    = moodle_env::get_env("dbpass", "test");' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->prefix    = "m_";' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->dboptions = ["dbcollation" => moodle_env::get_env("dbcollation", "utf8mb4_unicode_ci")];' >> $GITHUB_WORKSPACE/config.php
          echo '$host = "localhost";' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->wwwroot   = "http://{$host}";' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->dataroot  = realpath(dirname(__DIR__)) . "/moodledata";' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->admin     = "admin";' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->directorypermissions = 0777;' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->debug = (E_ALL | E_STRICT);' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->debugdisplay = 1;' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->debugstringids = 1;' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->perfdebug = 15;' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->debugpageinfo = 1;' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->allowthemechangeonurl = 1;' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->passwordpolicy = 0;' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->cronclionly = 0;' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->pathtophp = moodle_env::get_env("pathtophp");' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->phpunit_dataroot  = realpath(dirname(__DIR__)) . "/phpunitdata";' >> $GITHUB_WORKSPACE/config.php
          echo '$CFG->phpunit_prefix = "t_";' >> $GITHUB_WORKSPACE/config.php
          echo 'define("TEST_EXTERNAL_FILES_HTTP_URL", "http://$host:8080");' >> $GITHUB_WORKSPACE/config.php
          echo 'define("TEST_EXTERNAL_FILES_HTTPS_URL", "http://$host:8080");' >> $GITHUB_WORKSPACE/config.php
          echo 'define("TEST_SESSION_REDIS_HOST", $host);' >> $GITHUB_WORKSPACE/config.php
          echo 'define("TEST_CACHESTORE_REDIS_TESTSERVERS", $host);' >> $GITHUB_WORKSPACE/config.php
          echo 'require_once(__DIR__ . "/lib/setup.php");' >> $GITHUB_WORKSPACE/config.php
      
      - name: Install plugins
        run: |
          
          get_plugin_installation_dir () {
            local component_name=$1
            php -r "define('CLI_SCRIPT', 1); define('MOODLE_INTERNAL', 1); require '$GITHUB_WORKSPACE/config.php'; require_once '$GITHUB_WORKSPACE/lib/classes/component.php'; class_exists('core\component') === false && class_alias('core_component', '\core\component'); use core\component; [\$plugin_type, \$name] = component::normalize_component('$component_name'); \$plugin_types = component::get_plugin_types(); echo empty(\$plugin_types[\$plugin_type]) ? '' : \$plugin_types[\$plugin_type] . '/' . \$name;"
          }

          get_plugin_info () {
            local plugin_dir=$1
            local version_property=$2
            local default_value=${3:-''}
            php -r "define('MOODLE_INTERNAL', true); \$plugin = (object)[]; include('$plugin_dir/version.php'); echo \$plugin->${version_property} ?? '$default_value';"
          }

          get_repo_url () {
            local repo=$1
            if [[ $repo == "${{ inputs.org }}/"* ]]; then
              echo "https://oauth2:${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/${repo}.git"
            else
              echo "https://github.com/${repo}.git"
            fi
          }
          
          sync_repo () {
            local repo_dir=$1
            local ref=$2
            git clone --quiet $url $repo_dir
            git -C $repo_dir checkout --quiet $ref
          }

          copy_plugin_to_moodle () {
            local repo=$1
            local ref=$2
            local url=$3
            local repo_name=$4

            plugin_tmp_dir=$GITHUB_WORKSPACE/_tmp/$repo_name
            # Clone the plugin into temp folder
            git clone --quiet $url $plugin_tmp_dir

            # Read the plugin version.php
            if [[ ! -f $plugin_tmp_dir/version.php ]]; then
              printf "version.php not found in ${repo}@${ref}\n"
              rm -rf $plugin_tmp_dir
              return 1
            fi

            # Get component name
            component=$(get_plugin_info $plugin_tmp_dir 'component')

            # Get the plugin installation directory
            plugin_dir=$(get_plugin_installation_dir $component)

            # Move the plugin into the correct directory
            if [[ $plugin_dir != '' ]]; then
              mkdir -p $GITHUB_WORKSPACE/$plugin_dir
              mv $plugin_tmp_dir $GITHUB_WORKSPACE/$plugin_dir
            else
              printf "Component not found for ${repo}@${ref}\n"
              return 1
            fi

            printf "Installed ${repo}@${ref} to ${plugin_dir}\n"
            rm -rf $plugin_tmp_dir
          }

          # Install the plugin
          plugins=$(cat $GITHUB_WORKSPACE/plugins.txt)

          # Plugin format is org/repo:path@ref
          for plugin in $plugins; do
            plugin=$(echo $plugin | tr -d ' ')
            printf "Installing ${plugin}\n"
            
            # Check if plugin contains path
            if [[ $plugin == *":"* ]]; then
              repo=$(echo $plugin | cut -d: -f1)
              path=$(echo $plugin | cut -d: -f2 | cut -d@ -f1)
              ref=$(echo $plugin | cut -d@ -f2)
              url=$(get_repo_url $repo)

              git clone --quiet $url $GITHUB_WORKSPACE/$path

              printf "Installed ${repo}@${ref} to ${path}\n"

            # Check if plugin contains org
            elif [[ $plugin == *"/"* ]]; then
              repo=$(echo $plugin | cut -d@ -f1)
              ref=$(echo $plugin | cut -d@ -f2)
              repo_name=$(echo $repo | cut -d/ -f2)
              url=$(get_repo_url $repo)

              repo_tmp_dir=$GITHUB_WORKSPACE/_tmp/$repo_name

              sync_repo $repo_tmp_dir $ref

              copy_plugin_to_moodle $repo $ref $url $repo_name

            # Check if plugin contains refencence
            elif [[ $plugin == *"@"* ]]; then
              repo=$(echo "${{ inputs.org }}/$plugin" | cut -d@ -f1)
              ref=$(echo $plugin | cut -d@ -f2)
              repo_name=$(echo $repo | cut -d/ -f2)
              url=$(get_repo_url $repo)

              repo_tmp_dir=$GITHUB_WORKSPACE/_tmp/$repo_name

              sync_repo $repo_tmp_dir $ref

              copy_plugin_to_moodle $repo $ref $url $repo_name
              
            fi
          done

      - name: Setting up DB mysql
        if: ${{ inputs.dbtype == 'mysqli' }}
        uses: johanmeiring/mysql-action@tmpfs-patch
        with:
          collation server: utf8mb4_danish_ci
          mysql version: 9
          mysql database: ${{ env.dbname || 'test' }}
          mysql user: ${{ env.dbuser || 'test' }}
          mysql password: ${{ env.dbpass || 'test' }}
          use tmpfs: true

      - name: Setting up DB pgsql
        if: ${{ inputs.dbtype == 'pgsql' }}
        uses: m4nu56/postgresql-action@v1
        with:
          postgresql version: 16
          postgresql db: ${{ env.dbname || 'test' }}
          postgresql user: ${{ env.dbuser || 'test' }}
          postgresql password: ${{ env.dbpass || 'test' }}

      - name: Setting up DB mssql
        if: ${{ inputs.dbtype == 'sqlsrv' }}
        uses: praxisdigital/setup-mssql-server@dev
        with:
          version: 2022
          user: ${{ env.dbuser || 'test' }}
          password: ${{ env.dbpass || 'test' }}
          database: ${{ env.dbname || 'test' }}

      - name: Setting up PHPUnit
        env:
          dbtype: ${{ matrix.db }}
        run: |
          echo "pathtophp=$(which php)" >> $GITHUB_ENV # Inject installed pathtophp to env. The template config needs it.
          mkdir $GITHUB_WORKSPACE/../moodledata
          sudo locale-gen en_AU.UTF-8
          php $GITHUB_WORKSPACE/admin/tool/phpunit/cli/init.php --no-composer-self-update

      - name: Running PHPUnit tests
        env:
          dbtype: ${{ matrix.db }}
          component: ${{ inputs.plugin }}
        run: $GITHUB_WORKSPACE/vendor/bin/phpunit -c $GITHUB_WORKSPACE/phpunit.xml --testsuite=${component}_testsuite -v --testdox --colors
